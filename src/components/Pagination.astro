---
const { pageCount, current ,itemLength,url} = Astro.props
let pageList=[]
let isOverlength=false;
if(pageCount<itemLength){
  pageList = Array.from({ length: pageCount }, (_, index) => index + 1);
}else{
  isOverlength = true
  // 点击的分页距离左边开始位置的距离
  const toLeft = Math.floor(itemLength/2)
  // 用于控制距离右边的距离
  const  toRight= itemLength-1;
  // 限制开始
  let startIndex  = current-toLeft>1?current-toLeft:1;
  // 限制结尾
  startIndex = startIndex>(pageCount-toRight)?pageCount-toRight:startIndex
  pageList = Array.from({ length: itemLength }, (_, index) => index + startIndex);
}
---
<div class="pagination">
  {isOverlength && current>1&&<a href={url.prev} class="item">上一个</a> }
  {
    pageList.map((page) => {
      return (
        <a href={page === 1 ? "/" : `/${page}`}>
          <div class:list={["item", { active: current == page }]}>
            <span>{page}</span>
          </div>
        </a>
      );
    })
  }
  {isOverlength&& current!=pageCount&&  <a href={url.next} class="item">下一个</a> }

</div>

<style>
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    .item {
      cursor: pointer;
      margin: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 4px 10px;
      background: #fff;
      border-radius: 6px;
      &:hover {
        background-color: #333;
        color: #fff;
        -webkit-box-shadow: 3px 3px 12px #333;
        box-shadow: 3px 3px 12px #333;
      }
    }
    .active {
      background-color: #333;
      color: #fff;
    }
  }
</style>
